nodejs (lts: 18.12.0) (current: 19.0.0)(20.0.0)  (used: 14.15) (16.14.2)
mongodb (current: 6.0) (7.0.0) (used: 4.6)
elasticsearch (current 8.4)(8.11.3) (used: 7.5)
 
What is Node.js?
    - Node js is an open source, cross-platform javascript runtime environment.
    - It is used to create server side applications.
    - Node js run the v8 javascript engine.
    - Node js allows you to run javascript on the server.
    - It use in video streaming sites, also developing - Real Time web application,  n/w application, General purpose application, Distributed system
 
Features of Node.js.
    -   Asynchronous and Event Driven − All APIs of Node.js library are asynchronous, that is, non-blocking. It essentially means a Node.js based server never waits for an API to return data.
    The server moves to the next API after calling it and a notification mechanism of Events of Node.js helps the server to get a response from the previous API call.

    -   Very Fast − Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.
    -   Single Threaded but Highly Scalable − Node.js uses a single threaded model with event looping.
   	Event mechanism helps the server to respond in a non-blocking way and makes the server highly scalable. It uses an infinite loop to receive requests & process them.
    -   No Buffering − Node.js applications never buffer any data. These applications simply output the data in chunks.
    -   License − Node.js is released under the MIT license 
 
What is single threaded?
    -   Computing the execution of the entire task from beginning to end without interruption.
 
Why single threaded?
    - Node js is single threaded for asynchronous processing.
    - It uses an infinite loop to receive requests & process them.
 
Modules :-
    - It includes a set of functions.
    - To include modules in node js application use the require() function with the parentheses containing the module name.
    - Which can be reused throughout the node js application.
    - Module same as javascript libraries.
 
    - Modules are of three typed :-
    1)  Core Module : it is built in module that are come with node js installation eg. : http, url, fs etc
    2)  Local Module : we can create locally in node js application thats loaded in program.
    3)  Third-Party Module : it means we can install the module using NPM(node package manager) eg.: express, mysql, mogodb this are the third party module.
 
The module.exports in Node.js is used to export any literal, function or object as a module.
It is used to include JavaScript file into node.js applications.
The module is similar to variable that is used to represent the current module and exports is an object that is exposed as a module.
 
Syntax:
    -   module.exports = literal | function | object

Callback :-
    - Callback is a function which is called when a task is completed, 
	thus  helping in preventing any kind of blocking & callback function allows other code to run in the meantime.
 
Callback Hell :-
    - This is a big issue caused by coding with complex nested callbacks.
    - Here each & every callback takes an argument that is a result of the previous callback.
    - In this manner, the code structure looks like a pyramid, making it difficult to read & maintain.
    - Also, if there is an error in one function, then all other functions get affected.
   
How to avoid callback hell :-
    - We can avoid callback hell with the help of a promise.
    - Promises in javascript are a way to handle  asynchronous operation in node js.
    - When we return something from an asynchronous method it returns a promise which can be used to consume the final value when it is available in the future with the help of then() method or await inside of the async function.

4. what is callback function.
    - callback function is to be executed after another function finish execution.
    - we can pass function as argument to another function.
    - benifits : we can wait for the result of previous function call and then execute the another function call
    - it is used to execute the code in syncronous manner. it is useful when we have wait for result that takes time.

5. what is callback hell
    - callback means a function pass as an argument to another function.
    - if we have multiple functions that depends on another function so we pass that is as callback. (it create unmanagable code)
    - but it reduce the code redability and dificult to find the erros where the code breaks. and that terminology kenown as callback hell.

 
Middleware :-
 
    -   Express.js is a routing and Middleware framework for handling the different routing of the webpage and it works between the request and response cycle.
    -   Middleware gets executed after the server receives the request and before the controller actions send the response.
    -   Middleware has access to the request object, responses object, and next, it can process the request before the server sends a response.
    -   An Express-based application is a series of middleware function calls.
    -   Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application's request-response cycle.
 
Middleware functions can perform the following tasks:
    -   Execute any code.
    -   Make changes to the request and the response objects.
    -   End the request-response cycle.
    -   Call the next middleware in the stack.
 
Advantages of using middleware:
    -   Middleware can process request objects multiple times before the server works for that request.
    -   Middleware can be used to add logging and authentication functionality.
    -   Middleware improves client-side rendering performance.
    -   Middleware is used for setting some specific HTTP headers.
    -   Middleware helps for Optimization and better performance.
 
Middleware Chaining:
    -  Middleware can be chained from one to another, Hence creating a chain of functions that are executed in order.
    -  The last function sends the response back to the browser. So, before sending the response back to the browser the different middleware processes the request.
    -  The next() function in the express is responsible for calling the next middleware function if there is one.
 
       Syntax :-
       app.get(path, (req, res, next) => {}, (req, res) => {})

Event Loop :-
    -  Node.js is a single-threaded event-driven platform that is capable of running non-blocking, asynchronous programming.
    -  These functionalities of Node.js make it memory efficient.
    -  The event loop allows Node.js to perform non-blocking I/O operations.
 
Features of Event Loop:
    -   Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.
    -   The event loop executes tasks from the event queue only when the call stack is empty i.e. there is no ongoing task.
    -   The event loop allows us to use callbacks and promises.
 
Event Driven :-
    -   Event-Driven Programming in Node.js: Node.js makes extensive use of events which is one of the reasons behind its speed when compared to other similar technologies. Once we start a Node.js server, it initializes the variables and functions and then listens for the occurrence of an event.
    -   Event-driven programming is used to synchronize the occurrence of multiple events and to make the program as simple as possible. The basic components of an Event-Driven Program are:
    -   A callback function ( called an event handler) is called when an event is triggered.
    -   An event loop that listens for event triggers and calls the corresponding event handler for that event.
 
Event Emitter :-
   
    - Node.js uses an events module to create and handle custom events.
    - EventEmiiter class can be used to create & handle custom event modules.
    - The event emitter is a node module that allows objects to communicate with one another.
    - The core of Node’s asynchronous event driven architecture is EventEmitter.
    - Emitter objects send out named events which trigger listeners that have already been registered.
    - Hence, an emitter object has to two key characteristics:-
        -   Emitting name events
        -   Registering & unregistering listener functions.
 
 
var let const
The scope of a var variable is functional scope.    The scope of a let variable is block scope. The scope of a const variable is block scope.
It can be updated and re-declared into the scope.   It can be updated but cannot be redeclared into the scope.  It cannot be updated or re-declared into the scope.
It can be declared without initialization.  It can be declared without initialization.  It cannot be declared without initialization.
It can be accessed without initialization as its default value is “undefined”.  It cannot be accessed without initialization, as it returns an error.   It cannot be accessed without initialization, as it cannot be declared without initialization.
 
Streams :-
    - Streams are a type of data-handling methods and are used to read or write input into output sequentially.
    - Streams are used to handle reading/writing files or exchanging information in an efficient way.
    - Types of Streams in Node.js:
     There are namely four types of streams in Node.js.
        1.  Writable: We can write data to these streams. Example: fs.createWriteStream().
        2.  Readable: We can read data from these streams. Example: fs.createReadStream().
        3.  Duplex: Streams that are both Writable as well as Readable. Example: net.socket.
        4.  Transform: Streams that can modify or transform the data as it is written and read. Example: zlib.createDeflate.
 
    - Some Node APIs that uses streams are:
        -   net.Socket()
        -   process.stdin()
        -   process.stdout()
        -   process.stderr()
        -   fs.createReadStream()
        -   fs.createWriteStream()
        -   net.connect()
        -   http.request()
        -   zlib.createGzip()
        -   zlib.createGunzip()
        -   zlib.createDeflate()
        -   zlib.createInflate()
 
What is a route in node JS?
    - Routing defines the way in which the client requests are handled by the application endpoints.
    - A route is a section of Express code that associates an HTTP verb ( GET , POST , PUT , DELETE , etc.), a URL path/pattern, and a function that is called to handle that pattern.
 
How do Node.js works? 

    - Node is completely event-driven. Basically the server consists of one thread processing one event after another.
    - A new request coming in is one kind of event.
    - The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function.
    - The server then immediately starts to process another event (maybe another request).
    - When the IO operation is finished, that is another kind of event, and the server will process it (i.e. continue working on the request) by executing the callback as soon as it has time.
    - Node JS Platform does not follow Request/Response Multi-Threaded Stateless Model.
    - It follows Single Threaded with Event Loop Model.
    - Node JS Processing model mainly based on Javascript Event based model with Javascript callback mechanism.
        Single Threaded Event Loop Model Processing Steps:
        -   Clients Send request to Web Server.
        -   Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.
        -   Node JS Web Server receives those requests and places them into a Queue. It is known as “Event Queue”.
        -   Node JS Web Server internally has a Component, known as “Event Loop”. Why it got this name is that it uses indefinite loop to receive requests and process them.
        -   Event Loop uses Single Thread only. It is main heart of Node JS Platform Processing Model.
        -   Event Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.
        -   If yes, then pick up one Client Request from Event Queue
            ○   Starts process that Client Request
            ○   If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.
            ○   If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach
                ■   Checks Threads availability from Internal Thread Pool
                ■   Picks up one Thread and assign this Client Request to that thread.
                ■   That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop
                ■   Event Loop in turn, sends that Response to the respective Client.

What is cluster module ? 
   -  Cluster module - that provided the way of creating child process that run simultaneously and share the same server port.    
   -  Cluster module is create child processess that run on their own single thread to handle the load.
   -  Cluster provide some properties and method :-
        fork(), disconnect(), isDead, isMater, kill(), send()       

Whatis MVC architecture ? 
MVC : 
    - MVC is stand for model view controller.
    - It is design a pattern of software project. and it mojorly use by node js application. 
    - application and its development are divided into three interconnected parts. The advantage of this is it helps in focusing on a specific part of the application name, the ways information is presented to and accepted from, the user. It helps in allowing for efficient code reuse and the parallel development of the application. Even if the project structure might look a little different than an ideal MVC structure,

what is REPL ?